/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-05-17 01:35:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.emr_005fPage;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class emergency_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1683703012000L));
    _jspx_dependants.put("jar:file:/D:/choronglee/JSPProject/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/everymal/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("  \n");
      out.write("    <!-- core라이브러리를 c라는 접두사를 따와서 쓰겠다 -->\n");
      out.write("    ");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\n");
      out.write("    ");
 request.setCharacterEncoding("utf-8"); 
      out.write("\n");
      out.write("      <!DOCTYPE html>\n");
      out.write("      <html>\n");
      out.write("\n");
      out.write("      <head>\n");
      out.write("        <meta charset=\"UTF-8\" />\n");
      out.write("        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n");
      out.write("        <title>24시간 응급실</title>\n");
      out.write("\n");
      out.write("        <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/reset.css\" />\n");
      out.write("        <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/common.css\" />\n");
      out.write("        <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/emergency.css\" />\n");
      out.write("        <style type=\"text/css\"></style>\n");
      out.write("        <script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\n");
      out.write("      </head>\n");
      out.write("\n");
      out.write("      <body>\n");
      out.write("        <div id=\"container_sub\">\n");
      out.write("          <header id=\"header\">\n");
      out.write("            <nav>\n");
      out.write("              <ul class=\"topNav\">\n");
      out.write("                <li>\n");
      out.write("                  <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/board/listArticles.do\">1:1온라인 상담</a>\n");
      out.write("                </li>\n");
      out.write("                <li>\n");
      out.write("                  <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/emr_Page/emergency.jsp\">24시간 응급실</a>\n");
      out.write("                </li>\n");
      out.write("                <li><a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/petTaxiPage\">펫택시</a></li>\n");
      out.write("                <li><a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/hosfilter\">병원 찾기</a></li>\n");
      out.write("                <li>\n");
      out.write("                  ");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("                </li>\n");
      out.write("              </ul>\n");
      out.write("            </nav>\n");
      out.write("          </header>\n");
      out.write("          <h2 class=\"pagetitlte\">24시간 응급실</h2>\n");
      out.write("\n");
      out.write("          <section id=\"sidebar_Area\">\n");
      out.write("            <div class=\"sidebars\" id=\"hp_sidebar\">\n");
      out.write("              <p class=\"sidetitles\"></p>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <!-- 보류 -->\n");
      out.write("          </section>\n");
      out.write("          <section class=\"content\">\n");
      out.write("            <img class=\"sirenImg\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/img/siren1.png\" alt=\"사이렌\" />\n");
      out.write("            <div class=\"map_wrap\">\n");
      out.write("              <div id=\"map\" style=\"\n");
      out.write("              width: 100%;\n");
      out.write("              height: 100%;\n");
      out.write("              position: relative;\n");
      out.write("              overflow: hidden;\n");
      out.write("            \"></div>\n");
      out.write("\n");
      out.write("              <div id=\"menu_wrap\" class=\"bg_white\">\n");
      out.write("                <div class=\"option\">\n");
      out.write("                  <div>\n");
      out.write("                    <form onsubmit=\"searchPlaces(); return false;\">\n");
      out.write("                      <input type=\"text\" value=\"24시간 동물병원\" id=\"keyword\" size=\"15\" />\n");
      out.write("                      <button type=\"submit\">검색하기</button>\n");
      out.write("                    </form>\n");
      out.write("                  </div>\n");
      out.write("                </div>\n");
      out.write("                <hr />\n");
      out.write("                <ul id=\"placesList\"></ul>\n");
      out.write("                <div id=\"pagination\"></div>\n");
      out.write("              </div>\n");
      out.write("            </div>\n");
      out.write("          </section>\n");
      out.write("\n");
      out.write("          <footer>\n");
      out.write("            <ul class=\"bottomNav\">\n");
      out.write("              <li>\n");
      out.write("                <a id=\"footerLogo\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/index.jsp\"><img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/img/EverymalLogo_w.svg\"\n");
      out.write("                    alt=\"로고\" style=\"width: 250px; height: auto\" /></a>\n");
      out.write("              </li>\n");
      out.write("              <li>\n");
      out.write("                <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/board/listArticles.do\">1:1온라인 상담</a>\n");
      out.write("              </li>\n");
      out.write("              <li>\n");
      out.write("                <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/emr_Page/emergency.jsp\">24시간 응급실</a>\n");
      out.write("              </li>\n");
      out.write("              <li><a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/petTaxiPage\">펫택시</a></li>\n");
      out.write("              <li><a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/hosfilter\">병원 찾기</a></li>\n");
      out.write("              <li>\n");
      out.write("                ");
      if (_jspx_meth_c_005fchoose_005f2(_jspx_page_context))
        return;
      out.write("\n");
      out.write("              </li>\n");
      out.write("            </ul>\n");
      out.write("            <div class=\"table\">\n");
      out.write("              <address>\n");
      out.write("                <p>Everymal</p>\n");
      out.write("                <p>서울특별시 종로구 중구 12길 33층 123호</p>\n");
      out.write("                <p>공동대표. 김경민, 이초롱, 나은비, 황치연, 김소중</p>\n");
      out.write("              </address>\n");
      out.write("              <div class=\"custom\">\n");
      out.write("                <p>고객문의센터</p>\n");
      out.write("                <a href=\"tel:010-111-2222\">T. 1111-2222 (10:00 - 19:00 / 점심시간 12:30 - 13:30)</a>\n");
      out.write("                <a href=\"mailto:superman@test.com\">E. everymal@gmail.com</a>\n");
      out.write("              </div>\n");
      out.write("              <div class=\"footBtn\">\n");
      out.write("                <a href=\"#\">개인정보 처리방침</a>\n");
      out.write("                <a href=\"#\">이용약관</a>\n");
      out.write("              </div>\n");
      out.write("            </div>\n");
      out.write("          </footer>\n");
      out.write("         <script type=\"text/javascript\"\n");
      out.write("            src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=fce778b62d6e7a50391aeb034a647e51&libraries=services\"></script>\n");
      out.write("            <script>\n");
      out.write("            // 마커를 담을 배열입니다\n");
      out.write("            var markers = [];\n");
      out.write("\n");
      out.write("            var mapContainer = document.getElementById(\"map\"), // 지도를 표시할 div\n");
      out.write("              mapOption = {\n");
      out.write("                center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\n");
      out.write("                level: 3, // 지도의 확대 레벨\n");
      out.write("              };\n");
      out.write("\n");
      out.write("            // 지도를 생성합니다\n");
      out.write("            var map = new kakao.maps.Map(mapContainer, mapOption);\n");
      out.write("\n");
      out.write("            // 장소 검색 객체를 생성합니다\n");
      out.write("            var ps = new kakao.maps.services.Places();\n");
      out.write("\n");
      out.write("            // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\n");
      out.write("            var infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });\n");
      out.write("\n");
      out.write("            // 키워드로 장소를 검색합니다\n");
      out.write("            searchPlaces();\n");
      out.write("\n");
      out.write("            // 키워드 검색을 요청하는 함수입니다\n");
      out.write("            function searchPlaces() {\n");
      out.write("              var keyword = document.getElementById(\"keyword\").value;\n");
      out.write("\n");
      out.write("              if (!keyword.replace(/^\\s+|\\s+$/g, \"\")) {\n");
      out.write("                alert(\"키워드를 입력해주세요!\");\n");
      out.write("                return false;\n");
      out.write("              }\n");
      out.write("\n");
      out.write("              // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\n");
      out.write("              ps.keywordSearch(keyword, placesSearchCB);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\n");
      out.write("            function placesSearchCB(data, status, pagination) {\n");
      out.write("              if (status === kakao.maps.services.Status.OK) {\n");
      out.write("                // 정상적으로 검색이 완료됐으면\n");
      out.write("                // 검색 목록과 마커를 표출합니다\n");
      out.write("                displayPlaces(data);\n");
      out.write("\n");
      out.write("                // 페이지 번호를 표출합니다\n");
      out.write("                displayPagination(pagination);\n");
      out.write("              } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n");
      out.write("                alert(\"검색 결과가 존재하지 않습니다.\");\n");
      out.write("                return;\n");
      out.write("              } else if (status === kakao.maps.services.Status.ERROR) {\n");
      out.write("                alert(\"검색 결과 중 오류가 발생했습니다.\");\n");
      out.write("                return;\n");
      out.write("              }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 검색 결과 목록과 마커를 표출하는 함수입니다\n");
      out.write("            function displayPlaces(places) {\n");
      out.write("              var listEl = document.getElementById(\"placesList\"),\n");
      out.write("                menuEl = document.getElementById(\"menu_wrap\"),\n");
      out.write("                fragment = document.createDocumentFragment(),\n");
      out.write("                bounds = new kakao.maps.LatLngBounds(),\n");
      out.write("                listStr = \"\";\n");
      out.write("\n");
      out.write("              // 검색 결과 목록에 추가된 항목들을 제거합니다\n");
      out.write("              removeAllChildNods(listEl);\n");
      out.write("\n");
      out.write("              // 지도에 표시되고 있는 마커를 제거합니다\n");
      out.write("              removeMarker();\n");
      out.write("\n");
      out.write("              for (var i = 0; i < places.length; i++) {\n");
      out.write("                // 마커를 생성하고 지도에 표시합니다\n");
      out.write("                var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),\n");
      out.write("                  marker = addMarker(placePosition, i),\n");
      out.write("                  itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\n");
      out.write("\n");
      out.write("                // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n");
      out.write("                // LatLngBounds 객체에 좌표를 추가합니다\n");
      out.write("                bounds.extend(placePosition);\n");
      out.write("\n");
      out.write("                // 마커와 검색결과 항목에 mouseover 했을때\n");
      out.write("                // 해당 장소에 인포윈도우에 장소명을 표시합니다\n");
      out.write("                // mouseout 했을 때는 인포윈도우를 닫습니다\n");
      out.write("                (function (marker, title) {\n");
      out.write("                  kakao.maps.event.addListener(marker, \"mouseover\", function () {\n");
      out.write("                    displayInfowindow(marker, title);\n");
      out.write("                  });\n");
      out.write("\n");
      out.write("                  kakao.maps.event.addListener(marker, \"mouseout\", function () {\n");
      out.write("                    infowindow.close();\n");
      out.write("                  });\n");
      out.write("\n");
      out.write("                  itemEl.onmouseover = function () {\n");
      out.write("                    displayInfowindow(marker, title);\n");
      out.write("                  };\n");
      out.write("\n");
      out.write("                  itemEl.onmouseout = function () {\n");
      out.write("                    infowindow.close();\n");
      out.write("                  };\n");
      out.write("                })(marker, places[i].place_name);\n");
      out.write("\n");
      out.write("                fragment.appendChild(itemEl);\n");
      out.write("              }\n");
      out.write("\n");
      out.write("              // 검색결과 항목들을 검색결과 목록 Element에 추가합니다\n");
      out.write("              listEl.appendChild(fragment);\n");
      out.write("              menuEl.scrollTop = 0;\n");
      out.write("\n");
      out.write("              // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n");
      out.write("              map.setBounds(bounds);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 검색결과 항목을 Element로 반환하는 함수입니다\n");
      out.write("            function getListItem(index, places) {\n");
      out.write("              var el = document.createElement(\"li\"),\n");
      out.write("                itemStr =\n");
      out.write("                  '<span class=\"markerbg marker_' +\n");
      out.write("                  (index + 1) +\n");
      out.write("                  '\"></span>' +\n");
      out.write("                  '<div class=\"info\">' +\n");
      out.write("                  \"   <h5>\" +\n");
      out.write("                  places.place_name +\n");
      out.write("                  \"</h5>\";\n");
      out.write("\n");
      out.write("              if (places.road_address_name) {\n");
      out.write("                itemStr +=\n");
      out.write("                  \"    <span>\" +\n");
      out.write("                  places.road_address_name +\n");
      out.write("                  \"</span>\" +\n");
      out.write("                  '   <span class=\"jibun gray\">' +\n");
      out.write("                  places.address_name +\n");
      out.write("                  \"</span>\";\n");
      out.write("              } else {\n");
      out.write("                itemStr += \"    <span>\" + places.address_name + \"</span>\";\n");
      out.write("              }\n");
      out.write("\n");
      out.write("              itemStr +=\n");
      out.write("                '  <span class=\"tel\">' + places.phone + \"</span>\" + \"</div>\";\n");
      out.write("\n");
      out.write("              el.innerHTML = itemStr;\n");
      out.write("              el.className = \"item\";\n");
      out.write("\n");
      out.write("              return el;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n");
      out.write("            function addMarker(position, idx, title) {\n");
      out.write("              var imageSrc =\n");
      out.write("                \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\", // 마커 이미지 url, 스프라이트 이미지를 씁니다\n");
      out.write("                imageSize = new kakao.maps.Size(36, 37), // 마커 이미지의 크기\n");
      out.write("                imgOptions = {\n");
      out.write("                  spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\n");
      out.write("                  spriteOrigin: new kakao.maps.Point(0, idx * 46 + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n");
      out.write("                  offset: new kakao.maps.Point(13, 37), // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n");
      out.write("                },\n");
      out.write("                markerImage = new kakao.maps.MarkerImage(\n");
      out.write("                  imageSrc,\n");
      out.write("                  imageSize,\n");
      out.write("                  imgOptions\n");
      out.write("                ),\n");
      out.write("                marker = new kakao.maps.Marker({\n");
      out.write("                  position: position, // 마커의 위치\n");
      out.write("                  image: markerImage,\n");
      out.write("                });\n");
      out.write("\n");
      out.write("              marker.setMap(map); // 지도 위에 마커를 표출합니다\n");
      out.write("              markers.push(marker); // 배열에 생성된 마커를 추가합니다\n");
      out.write("\n");
      out.write("              return marker;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 지도 위에 표시되고 있는 마커를 모두 제거합니다\n");
      out.write("            function removeMarker() {\n");
      out.write("              for (var i = 0; i < markers.length; i++) {\n");
      out.write("                markers[i].setMap(null);\n");
      out.write("              }\n");
      out.write("              markers = [];\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\n");
      out.write("            function displayPagination(pagination) {\n");
      out.write("              var paginationEl = document.getElementById(\"pagination\"),\n");
      out.write("                fragment = document.createDocumentFragment(),\n");
      out.write("                i;\n");
      out.write("\n");
      out.write("              // 기존에 추가된 페이지번호를 삭제합니다\n");
      out.write("              while (paginationEl.hasChildNodes()) {\n");
      out.write("                paginationEl.removeChild(paginationEl.lastChild);\n");
      out.write("              }\n");
      out.write("\n");
      out.write("              for (i = 1; i <= pagination.last; i++) {\n");
      out.write("                var el = document.createElement(\"a\");\n");
      out.write("                el.href = \"#\";\n");
      out.write("                el.innerHTML = i;\n");
      out.write("\n");
      out.write("                if (i === pagination.current) {\n");
      out.write("                  el.className = \"on\";\n");
      out.write("                } else {\n");
      out.write("                  el.onclick = (function (i) {\n");
      out.write("                    return function () {\n");
      out.write("                      pagination.gotoPage(i);\n");
      out.write("                    };\n");
      out.write("                  })(i);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                fragment.appendChild(el);\n");
      out.write("              }\n");
      out.write("              paginationEl.appendChild(fragment);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\n");
      out.write("            // 인포윈도우에 장소명을 표시합니다\n");
      out.write("            function displayInfowindow(marker, title) {\n");
      out.write("              var content =\n");
      out.write("                '<div style=\"padding:5px;z-index:1;\">' + title + \"</div>\";\n");
      out.write("\n");
      out.write("              infowindow.setContent(content);\n");
      out.write("              infowindow.open(map, marker);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 검색결과 목록의 자식 Element를 제거하는 함수입니다\n");
      out.write("            function removeAllChildNods(el) {\n");
      out.write("              while (el.hasChildNodes()) {\n");
      out.write("                el.removeChild(el.lastChild);\n");
      out.write("              }\n");
      out.write("            }\n");
      out.write("            // 사이렌 여따가 추가\n");
      out.write("            let num = 1;\n");
      out.write("            setInterval(function () {\n");
      out.write("              num++;\n");
      out.write("              if (num > 2) {\n");
      out.write("                num = 1;\n");
      out.write("              }\n");
      out.write("              $(\".sirenImg\").attr(\"src\", \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/img/siren\" + num + \".png\");\n");
      out.write("            }, 1000);\n");
      out.write("          </script>\n");
      out.write("        </div>\n");
      out.write("      </body>\n");
      out.write("\n");
      out.write("      </html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /emr_Page/emergency.jsp(4,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("contextPath");
      // /emr_Page/emergency.jsp(4,4) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/emr_Page/emergency.jsp(4,4) '${pageContext.request.contextPath}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f0_reused = false;
    try {
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent(null);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                    ");
          if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\n");
          out.write("                    ");
          if (_jspx_meth_c_005fotherwise_005f1(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\n");
          out.write("                  ");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      _jspx_th_c_005fchoose_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f0_reused = false;
    try {
      _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /emr_Page/emergency.jsp(38,20) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${!empty isLogon}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
      if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                      ");
          if (_jspx_meth_c_005fchoose_005f1(_jspx_th_c_005fwhen_005f0, _jspx_page_context))
            return true;
          out.write("\n");
          out.write("                    ");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
      _jspx_th_c_005fwhen_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fwhen_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f1 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f1_reused = false;
    try {
      _jspx_th_c_005fchoose_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fwhen_005f0);
      int _jspx_eval_c_005fchoose_005f1 = _jspx_th_c_005fchoose_005f1.doStartTag();
      if (_jspx_eval_c_005fchoose_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                        ");
          if (_jspx_meth_c_005fwhen_005f1(_jspx_th_c_005fchoose_005f1, _jspx_page_context))
            return true;
          out.write("\n");
          out.write("                        ");
          if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f1, _jspx_page_context))
            return true;
          out.write("\n");
          out.write("                      ");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f1);
      _jspx_th_c_005fchoose_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f1 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f1_reused = false;
    try {
      _jspx_th_c_005fwhen_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f1);
      // /emr_Page/emergency.jsp(40,24) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${isHos}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f1 = _jspx_th_c_005fwhen_005f1.doStartTag();
      if (_jspx_eval_c_005fwhen_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                          <a href=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/hosMypageInfo\">병원마이페이지</a>\n");
          out.write("                        ");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f1);
      _jspx_th_c_005fwhen_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    boolean _jspx_th_c_005fotherwise_005f0_reused = false;
    try {
      _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fotherwise_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f1);
      int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
      if (_jspx_eval_c_005fotherwise_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                          <a href=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/userMypage\">회원마이페이지</a>\n");
          out.write("                        ");
          int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fotherwise_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
      _jspx_th_c_005fotherwise_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fotherwise_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f1 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    boolean _jspx_th_c_005fotherwise_005f1_reused = false;
    try {
      _jspx_th_c_005fotherwise_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fotherwise_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      int _jspx_eval_c_005fotherwise_005f1 = _jspx_th_c_005fotherwise_005f1.doStartTag();
      if (_jspx_eval_c_005fotherwise_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                      <a href=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/login.jsp\">로그인•회원가입</a>\n");
          out.write("                    ");
          int evalDoAfterBody = _jspx_th_c_005fotherwise_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fotherwise_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f1);
      _jspx_th_c_005fotherwise_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fotherwise_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f2 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f2_reused = false;
    try {
      _jspx_th_c_005fchoose_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f2.setParent(null);
      int _jspx_eval_c_005fchoose_005f2 = _jspx_th_c_005fchoose_005f2.doStartTag();
      if (_jspx_eval_c_005fchoose_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                  ");
          if (_jspx_meth_c_005fwhen_005f2(_jspx_th_c_005fchoose_005f2, _jspx_page_context))
            return true;
          out.write("\n");
          out.write("                  ");
          if (_jspx_meth_c_005fotherwise_005f2(_jspx_th_c_005fchoose_005f2, _jspx_page_context))
            return true;
          out.write("\n");
          out.write("                ");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f2.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f2);
      _jspx_th_c_005fchoose_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f2, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f2 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f2_reused = false;
    try {
      _jspx_th_c_005fwhen_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f2);
      // /emr_Page/emergency.jsp(107,18) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f2.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${!empty isLogon}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f2 = _jspx_th_c_005fwhen_005f2.doStartTag();
      if (_jspx_eval_c_005fwhen_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                    <a href=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/logindb/logout\">로그아웃</a>\n");
          out.write("                  ");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f2.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f2);
      _jspx_th_c_005fwhen_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f2, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f2 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    boolean _jspx_th_c_005fotherwise_005f2_reused = false;
    try {
      _jspx_th_c_005fotherwise_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fotherwise_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f2);
      int _jspx_eval_c_005fotherwise_005f2 = _jspx_th_c_005fotherwise_005f2.doStartTag();
      if (_jspx_eval_c_005fotherwise_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                    <a href=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/login.jsp\">로그인</a>\n");
          out.write("                  ");
          int evalDoAfterBody = _jspx_th_c_005fotherwise_005f2.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fotherwise_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f2);
      _jspx_th_c_005fotherwise_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fotherwise_005f2_reused);
    }
    return false;
  }
}
